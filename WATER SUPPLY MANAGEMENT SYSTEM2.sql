CREATE TABLE Customers(
    CustomerID  INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName   VARCHAR(20) NOT NULL,
    LastName    VARCHAR(20) NOT NULL,
    Street      VARCHAR(20) NOT NULL,
    City        VARCHAR(20) NOT NULL,
    Region      VARCHAR(20) NOT NULL,
    Phone       VARCHAR(15) UNIQUE
);

CREATE TABLE UsageHistory(
    UsageID     INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CustomerID  INT NOT NULL,
    Month       VARCHAR(20) NOT NULL,
    Year        INT NOT NULL,
    Consumption FLOAT NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

CREATE TABLE Bills(
    BillID      INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CustomerID  INT NOT NULL,
    Month       VARCHAR(20) NOT NULL,
    Year        INT NOT NULL,
    AmountDue   FLOAT NOT NULL,
    Status      VARCHAR(20) DEFAULT 'Unpaid',
    RatePerUnit FLOAT NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

CREATE TABLE Payments(
    PaymentID   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CustomerID  INT NOT NULL,
    BillID      INT NOT NULL,
    AmountPaid  FLOAT NOT NULL,
    PaymentDate DATE DEFAULT sysdate,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (BillID) REFERENCES Bills(BillID)
);

CREATE OR REPLACE FUNCTION CalculateMonthlyBill( p_Consumption FLOAT,p_RatePerUnit FLOAT )
RETURN FLOAT
IS
BEGIN
    RETURN p_Consumption * p_RatePerUnit;
END;

CREATE OR REPLACE FUNCTION GetCustomerAddress( p_CustomerID INT) 
RETURN VARCHAR
IS
    v_Address VARCHAR(100);
BEGIN
    SELECT Street || ', ' || City || ', ' || Region
    INTO v_Address
    FROM Customers
    WHERE CustomerID = p_CustomerID;

    RETURN v_Address;
END;

CREATE OR REPLACE FUNCTION CheckPaymentStatus( p_CustomerID INT) 
RETURN VARCHAR
IS
    v_Status VARCHAR(30);
BEGIN
    SELECT CASE
             WHEN EXISTS (
                 SELECT 1 FROM Bills
                 WHERE CustomerID = p_CustomerID AND Status = 'Unpaid'
             )
             THEN 'Unpaid'
             ELSE 'Paid'
           END
    INTO v_Status
    FROM dual;
    RETURN v_Status;
END;

CREATE OR REPLACE FUNCTION GetAverageConsumption( p_CustomerID INT) 
RETURN FLOAT
IS
    avg_val FLOAT;
BEGIN
    SELECT AVG(Consumption)
    INTO avg_val
    FROM UsageHistory
    WHERE CustomerID = p_CustomerID;

    RETURN avg_val;
END;

CREATE OR REPLACE PROCEDURE AddNewCustomer(
    p_FirstName VARCHAR,
    p_LastName  VARCHAR,
    p_Street  VARCHAR,
    p_City    VARCHAR,
    p_Region  VARCHAR,
    p_Phone   VARCHAR
)
AS
BEGIN
    INSERT INTO Customers(FirstName, LastName, Street, City, Region, Phone)
    VALUES (p_FirstName, p_LastName, p_Street, p_City, p_Region, p_Phone);

    DBMS_OUTPUT.PUT_LINE('Customer added successfully.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE RecordWaterUsage(
    p_CustomerID  INT,
    p_Month       VARCHAR,
    p_Year        INT,
    p_Consumption FLOAT
)
AS
BEGIN
    INSERT INTO UsageHistory(CustomerID, Month, Year, Consumption)
    VALUES (p_CustomerID, p_Month, p_Year, p_Consumption);
   

    DBMS_OUTPUT.PUT_LINE('Water usage recorded successfully.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);

END;

CREATE OR REPLACE PROCEDURE GenerateMonthlyBill(
    p_CustomerID  INT,
    p_Month       VARCHAR,
    p_Year        INT,
    p_RatePerUnit FLOAT
)
AS
    v_Consumption FLOAT;
    v_Amount      FLOAT;
BEGIN
    SELECT Consumption INTO v_Consumption
    FROM UsageHistory
    WHERE CustomerID = p_CustomerID
      AND Month = p_Month
      AND Year = p_Year;

    v_Amount := CalculateMonthlyBill(v_Consumption, p_RatePerUnit);

    INSERT INTO Bills(CustomerID, Month, Year, AmountDue, RatePerUnit)
    VALUES (p_CustomerID, p_Month, p_Year, v_Amount, p_RatePerUnit);
END;

CREATE OR REPLACE TRIGGER UpdatePaymentStatus
AFTER INSERT ON Payments
FOR EACH ROW
BEGIN
    UPDATE Bills
    SET Status = CASE
                   WHEN AmountDue <= :NEW.AmountPaid THEN 'Paid'
                   ELSE 'Unpaid'
                 END
    WHERE BillID = :NEW.BillID;
END;

CREATE OR REPLACE TRIGGER PreventCustomerDeletion
BEFORE DELETE ON Customers
FOR EACH ROW
DECLARE
    v_Unpaid NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_Unpaid
    FROM Bills
    WHERE CustomerID = :OLD.CustomerID AND Status = 'Unpaid';

    IF v_Unpaid > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Cannot delete customer with unpaid bills.');
    END IF;
END;

CREATE OR REPLACE TRIGGER RecalculateBill
AFTER UPDATE ON UsageHistory
FOR EACH ROW
BEGIN
    UPDATE Bills
    SET AmountDue = CalculateMonthlyBill(:NEW.Consumption, RatePerUnit)
    WHERE CustomerID = :NEW.CustomerID
      AND Month = :NEW.Month
      AND Year = :NEW.Year;
END;

BEGIN
    AddNewCustomer(
        'Melat',
        'Melkamu',
        'Kebele 14, House No. 123',
        'Gondar',
        'Amhara',
        '0911213144'
    );
END;

BEGIN
    AddNewCustomer(
        'Kalkidan',
        'Birara',
        'Kebele 6, House No. 401',
        'Gondar',
        'Amhara',
        '0918263454'
    );
END;

BEGIN
    AddNewCustomer(
        'Abebe',
        'Alemu',
        'Kebele 18, House No. 123',
        'Gondar',
        'Amhara',
        '0921333144'
    );
END;
INSERT INTO Customers(FirstName, LastName, Street, City, Region, Phone)
VALUES ('Abebe', 'Kebede', 'Kebele 08', 'Gondar', 'Amhara', '0911223344');
INSERT INTO Customers(FirstName, LastName, Street, City, Region, Phone)
VALUES ('Aster', 'Lema', 'Kebele 07', 'Gondar', 'Amhara', '0918923464');
INSERT INTO Customers(FirstName, LastName, Street, City, Region, Phone)
VALUES ('Mahilet', 'Bimr', 'Kebele 06', 'Gondar', 'Amhara', '0954321234');
 INSERT INTO Customers(FirstName, LastName, Street, City, Region, Phone)
VALUES ('Arsema', 'Yirga', 'Kebele 18', 'Gondar', 'Amhara', '0900854535');

 SELECT * FROM Customers;

INSERT INTO UsageHistory(CustomerID, Month, Year, Consumption)
VALUES (6, 'May', 2025, 30.5);
INSERT INTO UsageHistory(CustomerID, Month, Year, Consumption)
VALUES (7, 'May', 2025, 40); 
INSERT INTO UsageHistory(CustomerID, Month, Year, Consumption)
VALUES (8, 'May', 2025, 35.5); 
INSERT INTO UsageHistory(CustomerID, Month, Year, Consumption)
VALUES (9, 'May', 2025, 35.0);  

SELECT * FROM UsageHistory;

INSERT INTO Bills(CustomerID, Month, Year, AmountDue, RatePerUnit)
VALUES (6, 'May', 2025, 61.0, 2.0);
INSERT INTO Bills(CustomerID, Month, Year, AmountDue, RatePerUnit)
VALUES (7, 'May', 2025, 80.0, 2.0);
INSERT INTO Bills(CustomerID, Month, Year, AmountDue, RatePerUnit)
VALUES (8, 'May', 2025, 71.0, 2.0); 
INSERT INTO Bills(CustomerID, Month, Year, AmountDue, RatePerUnit)
VALUES (9, 'May', 2025, 70.0, 2.0); 

SELECT * FROM Bills;

INSERT INTO Payments(CustomerID, BillID, AmountPaid)
VALUES (6, 1, 61.0);
INSERT INTO Payments(CustomerID, BillID, AmountPaid)
VALUES (7, 2, 80.0);
INSERT INTO Payments(CustomerID, BillID, AmountPaid)
VALUES (8, 3, 71.0);

SELECT * FROM Payments;


SELECT GetCustomerAddress(6) FROM dual;
SELECT GetCustomerAddress(7) FROM dual;
SELECT GetCustomerAddress(8) FROM dual;

SELECT CheckPaymentStatus(6) FROM dual;
SELECT CheckPaymentStatus(9) FROM dual;

BEGIN
    RecordWaterUsage(1, 'June', 2025, 45.7);
END;

BEGIN
    RecordWaterUsage(2, 'June', 2025, 40.0);
END;

DELETE FROM Customers WHERE CustomerID =9;

SELECT CalculateMonthlyBill(30.5, 2.0) FROM dual;

SELECT GetAverageConsumption(6) FROM dual;
BEGIN
    GenerateMonthlyBill(6, 'May', 2025, 2.0);
END;





--group member                             ID No
--1,Arsema yirga(group leader)            02128/16
--2,Kalkidan Birara                       02768/16
--3,Melat Melkamu                         02800/16
--4,Mahilet Bimr                          02783/16
--5,Mezigebu Mekonnen                     00338/16



